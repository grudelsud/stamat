from django.contrib.auth.models import User
from django.db import models
from django.template.defaultfilters import slugify

ESSENCES = (
	('sys_drop_type', 'sys_drop_type'),
	('sys_blob_type', 'sys_blob_type'),
	('sys_spring_type', 'sys_spring_type'),
	('sys_torrent_type', 'sys_torrent_type'),
	('sys_puddle_type', 'sys_puddle_type'),
	('sys_category', 'sys_category'),
	('sys_language', 'sys_language'),
	('u_category', 'u_category'),
	('u_keyword', 'u_keyword'),
	('u_person', 'u_person'),
	('u_organization', 'u_organization'),
	('u_location', 'u_location'),
)

class Substance(models.Model):
	"""
	descriptor for an element, can be a keyword, person, location, organization, ...
	"""
	name = models.CharField(max_length=500)
	slug = models.SlugField(blank=True)
	essence = models.CharField(max_length=50, db_index=True, choices=ESSENCES)
	count = models.IntegerField(default=0)

	user = models.ForeignKey(User)
	parent = models.ForeignKey('self', null=True, blank=True)

	created = models.DateTimeField(auto_now_add=True)
	modified = models.DateTimeField(auto_now=True)

	def __unicode__(self):
		return '%s (%s)' % (self.slug, self.essence)

	def save(self, *args, **kwargs):
		# For automatic slug generation.
		if not self.slug:
			self.slug = slugify(self.name)[:50]

		return super(Substance, self).save(*args, **kwargs)

class Drop(models.Model):
	"""
	a drop is a single text element generated by a spring
	"""
	title = models.CharField(max_length=500)
	url = models.CharField(max_length=500)
	md5 = models.CharField(max_length=50)
	date = models.DateTimeField()
	description = models.CharField(max_length=500, blank=True)
	abstract = models.CharField(max_length=500, blank=True)
	content = models.TextField(blank=True)
	lat = models.FloatField(blank=True, null=True)
	lng = models.FloatField(blank=True, null=True)

	user = models.ForeignKey(User)
	substances = models.ManyToManyField('Substance', null=True, blank=True)

	created = models.DateTimeField(auto_now_add=True)
	modified = models.DateTimeField(auto_now=True)

	def __unicode__(self):
		return '%s' % (self.title,)

class Blob(models.Model):
	"""
	a blob is a rich media element generated by a spring, generally associated to a drop, even if it can live alone
	"""
	url = models.CharField(max_length=500)
	primary = models.BooleanField()
	flags = models.IntegerField(default=0)
	hash = models.CharField(max_length=50, blank=True)
	abs_path = models.CharField(max_length=500, blank=True)
	lat = models.FloatField(blank=True, null=True)
	lng = models.FloatField(blank=True, null=True)

	user = models.ForeignKey(User)
	substances = models.ManyToManyField('Substance', null=True, blank=True)
	drop = models.ForeignKey(Drop, null=True, blank=True)

	created = models.DateTimeField(auto_now_add=True)
	modified = models.DateTimeField(auto_now=True)

class Spring(models.Model):
	"""
	a spring is a generic source of content, can be anything: RSS feed, facebook wall, twitter account, ...
	"""
	title = models.CharField(max_length=500, db_index=True)
	url = models.CharField(max_length=50)
	fetch = models.BooleanField(default=1)

	users = models.ManyToManyField(User)
	substances = models.ManyToManyField(Substance, null=True, blank=True)
	drops = models.ManyToManyField(Drop, null=True, blank=True)
	blobs = models.ManyToManyField(Blob, null=True, blank=True)

	created = models.DateTimeField(auto_now_add=True)
	modified = models.DateTimeField(auto_now=True)

	def __unicode__(self):
		return '%s' % (self.title,)

class Torrent(models.Model):
	"""
	a torrent is a flow of monitored elements, can describe an event, a campaign or similar
	"""
	name = models.CharField(max_length=500)
	slug = models.SlugField(blank=True)
	meta = models.TextField(blank=True)

	user = models.ForeignKey(User)
	substances = models.ManyToManyField(Substance, null=True, blank=True)
	puddles = models.ManyToManyField('Puddle', null=True, blank=True)

	created = models.DateTimeField(auto_now_add=True)
	modified = models.DateTimeField(auto_now=True)

	def __unicode__(self):
		return '%s' % (self.slug,)

	def save(self, *args, **kwargs):
		# For automatic slug generation.
		if not self.slug:
			self.slug = slugify(self.name)[:50]

		return super(Torrent, self).save(*args, **kwargs)

class Puddle(models.Model):
	"""
	a puddle is a collection of elements in a torrent, use to describe a specific aspect of what represented by the associated torrent.
	it loosely represents an index of images or a set of text elements describing a topic model
	"""
	name = models.CharField(max_length=500)
	slug = models.SlugField(blank=True)
	meta = models.TextField(blank=True)

	substances = models.ManyToManyField(Substance, null=True, blank=True)
	drops = models.ManyToManyField(Drop, null=True, blank=True)
	blobs = models.ManyToManyField(Blob, null=True, blank=True)

	created = models.DateTimeField(auto_now_add=True)
	modified = models.DateTimeField(auto_now=True)

	def __unicode__(self):
		return '%s' % (self.slug,)

	def save(self, *args, **kwargs):
		# For automatic slug generation.
		if not self.slug:
			self.slug = slugify(self.name)[:50]

		return super(Puddle, self).save(*args, **kwargs)
